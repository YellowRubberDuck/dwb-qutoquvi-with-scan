/*jslint eqeq:true */
//
//  Copyright (c) 2012 Stefan Bolte <portix@gmx.net>
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 3 of the License, or
//  (at your option) any later version.
//  
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  
//  You should have received a copy of the GNU General Public License along
//  with this program; if not, write to the Free Software Foundation, Inc.,
//  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//

/*<INFO
Automatically load videos supported by libquvi in an external player
INFO>*/

var me = "autoquvi";
var defaultConfig = { 
//<DEFAULT_CONFIG
// The quvi command
quvi      : "quvi",  

// External player command
player    : "mplayer %u", 

// Whether to automatically play videos if quvi finds a playable
// video
autoPlay  : true, 

// Whether to choose the quality before quvi starts
chooseQuality : true,

// A shortcut that spawns quvi for the current website
shortcut  : "",

// A command that spawns quvi for the current website 
command  : "autoquvi", 

// 
// Whether to autospawn quvi only in the active tab
activeOnly : true 

//>DEFAULT_CONFIG
};

var config = {};
var quviSeries;
var supported = [];

var tryPlayResponse = {
    onFinished : function(response) {
        if (response.status == 0) {
            io.notify("Playing video using autoquvi");
        }
    }
};
function playVideo(uri, arg)
{
    
    system.spawn("myquvi '" + uri + "'");
    io.notify("Playing video using autoquvi from video service");
}
function quviSpawn(wv) 
{
    var i, s;
    var auto = true;
    var quvi = config.quvi;
    if (config.activeOnly && wv instanceof WebKitWebView && wv !== tabs.current)
    {
        return;
    }
    var uri = wv.uri || tabs.current.uri;

    for (i=0; i<supported.length; i++) {
        s = supported[i];
        if (s.test(uri)) {
            playVideo(uri);
            io.notify("Playing video using autoquvi");
            return;
        }
    }
    if (auto === false) 
    {
        io.error("Not supported by quvi");
    }
}
function quviScan(wv)
{
    var uri = wv.uri || tabs.current.uri;
    system.spawn("myquvi '" + uri + "'")
    io.notify("Playing video using autoquvi");
}
function initSettings()
{
    if (config.autoPlay) {
        Signal.connect("loadCommitted", quviSpawn);
    }
    if (typeof config.shortcut === "string" || typeof config.command === "string") {
        bind(config.shortcut, quviScan, config.command);
    }
}
function supported_v4(response) 
{
    var i;
    var lines = response.split("\n");
    for (i=0; i<lines.length; i++) {
        if (lines[i]) {
            try {
                var pattern = lines[i].match(/^\s*\S+/)[0];
                supported.push(new RegExp(pattern.replace(/%/g, "\\")));
            } 
            catch(e) {
                extensions.error(me, e);
            }
        }
    }
    initSettings();
}
function supported_v9(response)
{
    var lines = response.split("\n");
    supported = lines.filter(function(line) {
        return !/^\s*$|^#.*/.test(line);
    }).map(function(line) {
        return new RegExp(".*[./]" + RegExp.escape(line) + "[:/$].*");
    });
    initSettings();
}
function getSupported(d, command, callback) {
    system.spawn(command, { cacheStdout : true }).then(function(response) {
        callback(response.stdout);
        d.resolve(true);
    }, function() {
        d.reject();
    });
}
var autoquviExtension =  { 
    defaultConfig : defaultConfig, 
    init : function (c) {
        var d = new Deferred();
        var stat;
        config = c;
        var major, minor, micro;
        system.spawn(config.quvi + " --version", { cacheStdout : true }).then(function(response) {
            var versionLine = response.stdout.split("\n")[0];
            var version = /[0-9]+\.[0-9]+(\.[0-9]+)?/.exec(versionLine)[0].split(".");
            major = parseInt(version[0], 10); 
            minor = parseInt(version[1], 10); 
            micro = parseInt(version[2], 10);
        }).then(function() {
            if (major === 0 && minor >= 9)
            {
                quviSeries = 9;
                getSupported(d, config.quvi + " info -D", supported_v9);
            }
            else if (major === 0 && minor >= 4)
            {
                quviSeries = 4;
                getSupported(d, config.quvi + " --support", supported_v4);
            }
            else 
            {
                extensions.error("autoquvi", "Unsupported quvi version");
                d.reject();
            }
        });
        return d;
    },
    end : function () {
        unbind(quviSpawn);
        Signal.disconnect(quviSpawn);
        return true;
    }

};
return autoquviExtension;
// vim: set ft=javascript:
